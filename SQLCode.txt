-- ====================================================================
-- SAFE DELETION SCRIPT FOR A PURCHASE ORDER AND ALL RELATED DATA
-- To use: Change the value of @po_id_to_delete before running.
-- ====================================================================

-- Start a transaction: If any step fails, the entire operation will be rolled back.
START TRANSACTION;

-- Step 1: SET THE PURCHASE ORDER ID YOU WANT TO DELETE
SET @po_id_to_delete = 'PUR000006'; -- <-- CHANGE THIS ID

-- Step 2: Find all GRNs generated by this Purchase Order
CREATE TEMPORARY TABLE IF NOT EXISTS temp_grns_to_delete (
    grn_id VARCHAR(10) PRIMARY KEY
);
INSERT INTO temp_grns_to_delete (grn_id)
SELECT grn_id FROM grn WHERE remarks LIKE CONCAT('%', @po_id_to_delete, '%');

-- Step 3: IMPORTANT - Reverse the stock quantities from all associated GRNs
-- This ensures stock levels remain accurate.
UPDATE stock_levels sl
JOIN grn_items gi ON sl.item_id = gi.item_id
JOIN temp_grns_to_delete tg ON gi.grn_id = tg.grn_id
SET sl.quantity = sl.quantity - gi.quantity;

-- Step 4: Delete all child records linked to the PO and its GRNs

-- Delete accounting journal entries
DELETE FROM acc_transactions WHERE source_type = 'purchase_order' AND source_id = @po_id_to_delete;

-- Delete stock transaction history
DELETE st FROM stock_transactions st
JOIN temp_grns_to_delete tg ON st.reason LIKE CONCAT('%', tg.grn_id, '%');

-- Delete GRN line items
DELETE gi FROM grn_items gi
JOIN temp_grns_to_delete tg ON gi.grn_id = tg.grn_id;

-- Delete Purchase Order line items
DELETE FROM purchase_order_items WHERE purchase_order_id = @po_id_to_delete;

-- Delete Purchase Order status history
DELETE FROM purchase_order_status_history WHERE purchase_order_id = @po_id_to_delete;

-- Delete links to Sales Orders
DELETE FROM po_so_links WHERE purchase_order_id = @po_id_to_delete;

-- Step 5: Delete the main parent records

-- Delete the GRNs themselves
DELETE g FROM grn g
JOIN temp_grns_to_delete tg ON g.grn_id = tg.grn_id;

-- Delete the Purchase Order itself
DELETE FROM purchase_orders WHERE purchase_order_id = @po_id_to_delete;

-- Step 6: Clean up the temporary table
DROP TEMPORARY TABLE temp_grns_to_delete;

-- Step 7: Reset the sequences to the next correct number
-- This step is optional but recommended for keeping IDs clean.

SELECT COALESCE(MAX(CAST(SUBSTRING(purchase_order_id, 4) AS UNSIGNED)), 0) + 1 INTO @next_po_val FROM purchase_orders;
UPDATE system_sequences SET next_value = @next_po_val WHERE sequence_name = 'purchase_order_id';

SELECT COALESCE(MAX(CAST(SUBSTRING(grn_id, 4) AS UNSIGNED)), 0) + 1 INTO @next_grn_val FROM grn;
UPDATE system_sequences SET next_value = @next_grn_val WHERE sequence_name = 'grn_id';

SELECT COALESCE(MAX(CAST(SUBSTRING(transaction_id, 4) AS UNSIGNED)), 0) + 1 INTO @next_trn_val FROM stock_transactions;
UPDATE system_sequences SET next_value = @next_trn_val WHERE sequence_name = 'transaction_id';

-- If all steps succeeded, commit the changes to the database.
COMMIT;

SELECT CONCAT('Cleanup complete for ', @po_id_to_delete, ' and its related data. Stock has been reversed and sequences reset.') AS Status;