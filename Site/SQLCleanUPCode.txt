-- This script will remove all data associated with PUR000006 and its generated GRNs.

-- Start a transaction: If any step fails, the whole operation will be rolled back.
START TRANSACTION;

-- Step 1: Define the Purchase Order ID we are targeting.
SET @po_id = 'PUR000006';

-- Step 2: Find all GRN IDs that were generated by this Purchase Order.
-- This creates a comma-separated list like 'GRN000007','GRN000009' for use in later queries.
SELECT GROUP_CONCAT(DISTINCT CONCAT("'", grn_id, "'")) INTO @grn_ids 
FROM grn 
WHERE remarks LIKE CONCAT('%', @po_id, '%');

-- Step 3: IMPORTANT - Reverse the stock quantities BEFORE deleting the records.
-- This subtracts the quantities from the affected GRNs from the main stock levels table.
UPDATE stock_levels sl
JOIN grn_items gi ON sl.item_id = gi.item_id
JOIN grn g ON gi.grn_id = g.grn_id
SET sl.quantity = sl.quantity - gi.quantity
WHERE g.remarks LIKE CONCAT('%', @po_id, '%');


-- Step 4: Delete all child records linked to the PO and its GRNs.

-- Delete accounting journal entries linked to the Purchase Order.
DELETE FROM acc_transactions WHERE source_type = 'purchase_order' AND source_id = @po_id;

-- Delete stock transaction history generated by the GRNs (both IN and OUT).
DELETE stock_transactions
FROM stock_transactions
JOIN grn ON stock_transactions.reason LIKE CONCAT('%', grn.grn_id, '%')
WHERE grn.remarks LIKE CONCAT('%', @po_id, '%');

-- Delete GRN line items.
DELETE grn_items 
FROM grn_items
JOIN grn ON grn_items.grn_id = grn.grn_id
WHERE grn.remarks LIKE CONCAT('%', @po_id, '%');

-- Delete Purchase Order line items.
DELETE FROM purchase_order_items WHERE purchase_order_id = @po_id;

-- Delete Purchase Order status history.
DELETE FROM purchase_order_status_history WHERE purchase_order_id = @po_id;


-- Step 5: Delete the main parent records.

-- Delete the GRNs themselves.
DELETE FROM grn WHERE remarks LIKE CONCAT('%', @po_id, '%');

-- Delete the Purchase Order itself.
DELETE FROM purchase_orders WHERE purchase_order_id = @po_id;


-- Step 6: Reset the sequences to the next correct number.

-- Reset the Purchase Order sequence.
SELECT COALESCE(MAX(CAST(SUBSTRING(purchase_order_id, 4) AS UNSIGNED)), 0) + 1 INTO @next_po_val FROM purchase_orders;
UPDATE system_sequences SET next_value = @next_po_val WHERE sequence_name = 'purchase_order_id';

-- Reset the GRN sequence.
SELECT COALESCE(MAX(CAST(SUBSTRING(grn_id, 4) AS UNSIGNED)), 0) + 1 INTO @next_grn_val FROM grn;
UPDATE system_sequences SET next_value = @next_grn_val WHERE sequence_name = 'grn_id';

-- Reset the stock transaction sequence.
SELECT COALESCE(MAX(CAST(SUBSTRING(transaction_id, 4) AS UNSIGNED)), 0) + 1 INTO @next_trn_val FROM stock_transactions;
UPDATE system_sequences SET next_value = @next_trn_val WHERE sequence_name = 'transaction_id';


-- If all steps succeeded, commit the changes to the database.
COMMIT;

SELECT 'Cleanup complete for PUR000006 and its related GRNs. Stock has been reversed and sequences have been reset.' AS Status;